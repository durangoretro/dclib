 MEMORY {
            ZP0:   start = $0   , size = $30;
            ZP1:    start = $30   , size = $d0;
            RAM:  start = $2000, size = $4000;
            VIDEO: start=$6000, size=$2000;
            ROM1:  start = $8000, size = $4000, fill=no;
            ROM2:  start = $C000, size = $1f00, fill=yes, fillval=$ff;
            FORB:  start = $DF00, size=$80, fill=yes, fillval=$21;
            IO:    start = $DF80, size=$80, fill=yes, fillval=$23;
            ROM3:  start = $E000, size = $2000, fill=yes, fillval=$ff;
        }
SEGMENTS {
    ZEROPAGE:  load = ZP1,  type = zp,  define   = yes;
    DATA:      load = ROM2, type = rw,  define   = yes, run = RAM;
    BSS:       load = RAM,  type = bss, define   = yes;
    HEAP:      load = RAM,  type = bss, start=$4000, optional = yes;
    DXHEAD:    load = ROM2, type = ro;
    STARTUP:   load = ROM2, type = ro, start=$C100;
    ONCE:      load = ROM2, type = ro,  optional = yes;
    CODE:      load = ROM2, type = ro;
    RODATA:    load = ROM3, type = ro;
    HEADER:    load = IO,   type = ro,  optional = yes;
    METADATA:   load = ROM3, type = ro,  start = $FF60;
    VECTORS:   load = ROM3, type = ro,  start = $FFFA;
}

FEATURES {
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
    STARTADDRESS: default= $8000;
}

SYMBOLS {
    # Define the stack size for the application
    __STACKSTART__: type = export, value = $0300;
    __STACKSIZE__: type = weak, value = $1D00;
}
